#! /bin/bash

# update_pkgs.sh
#
# Copyright (C) 2014 Politecnico di Torino, Italy
#                    TORSEC group -- http://security.polito.it
#
# Author: Roberto Sassu <roberto.sassu@polito.it>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library.  If not, see
# <http://www.gnu.org/licenses/>.

RA_CONFIG_DIR="/etc/ra"
RA_CONFIG_FILE="$RA_CONFIG_DIR/ra.conf"

if [ -f $RA_CONFIG_FILE ]; then
.  $RA_CONFIG_FILE
fi

if [ -z $RABASEDIR ]; then
	echo "RABASEDIR variable is not defined. Please set it in /etc/ra/ra.conf"
	exit 1
fi

if [ -z $TARGETBASEDIR ]; then
	echo "TARGETBASEDIR variable is not defined. Please set it in /etc/ra/ra.conf"
	exit 1
fi

if [ ! -d $TARGETBASEDIR ]; then
	echo "The $TARGETBASEDIR directory is not existent"
	exit 1
fi


DATESUFFIX=`date +%Y%m%d_%H%M_%S`
INSERTSCRIPT="$RABASEDIR/db/scripts/client_insert_pkg_hash.py"
BODHISCRIPT="$RABASEDIR/db/scripts/client_insert_pkg_bodhi.py"
HTTPSCRIPT="$RABASEDIR/db/scripts/client_insert_pkg_http.py"
BODHISCRIPT_DEB="$RABASEDIR/db/scripts/client_insert_pkg_bodhi_DEB.py"
KEYSPACE="PackagesDB"
LOGDIR="$RABASEDIR/db/logs"
DBLOGFILE="$LOGDIR/cassandra_err.log"
BODHILOGFILE="$LOGDIR/bodhi_err.log"
BODHILOGFILE_DEB="$LOGDIR/bodhideb_err.log"
RHEL6LOGFILE="$LOGDIR/rhel_err.log"
HTTPLOGFILE="$LOGDIR/http_err.log"
TRANSACTIONLOGFILE="$LOGDIR/transactions.log"
CONFDIR="$RABASEDIR/db/conf"
FILELIST="$RA_CONFIG_DIR/pkgs_download_list.conf"
CENTOSSCRIPT="$RABASEDIR/db/scripts/client_insert_pkg_centos.py"
CENTOSLOGFILE="$LOGDIR/centos.log"


if [ ! -d "$TARGETBASEDIR" ]; then
	mkdir -p $TARGETBASEDIR
fi

function db_insert()
{
	# Workaround for distribution name
#	curdist=$(echo $2 | sed 's/^F/Fedora/g')
#	curdist=$(echo $curdist |  awk -F"-" '{ if (length($2)==0) print $1; else print $2}')

	curdist=$(echo $2 | sed 's/-//g' | sed 's/Ubuntu//g')

#	if [ $(expr match $2 "Ubuntu") -eq 6 ]; then
#		# Setup a GIT repository for each Packages.[bz2|gz]
#		for pkgdbfile in $(cat $1 | awk '$4 ~ />f+++++++++/ && $5 ~ /^dists/ && $5 ~ /Packages.gz/ {print $5}'); do
#			PACKAGESDBDIR=$6/$(dirname $pkgdbfile)
#			PACKAGESDBGITDIR=$PACKAGESDBDIR/Packages_git
#			SAVEDDIR=$PWD
#
#			if [ ! -e "$PACKAGESDBGITDIR" ]; then
#				mkdir $PACKAGESDBGITDIR
#				git init $PACKAGESDBGITDIR
#				git config -f $PACKAGESDBGITDIR/.git/config user.name "update_pkgs.sh"
#				git config -f $PACKAGESDBGITDIR/.git/config user.email "user@localhost"
#				touch $PACKAGESDBGITDIR/Packages
#			fi
#
#			cd $PACKAGESDBGITDIR
#			zcat $6/$pkgdbfile > Packages
#			git add Packages
#			git commit -m"Automated save of Packages database"
#			if [ $? -eq 0 ]; then
#				git tag $DATESUFFIX
#			fi
#
#			cd $SAVEDDIR
#		done
#		if [ $4 != "testing" ] && [ $4 != "newpackage" ] && [ $4 != "pyunit" ]; then
#			$BODHISCRIPT_DEB -b "$RABASEDIR/dist/backup/" -l $BODHILOGFILE_DEB -d $6 -H $CASSANDRAURL
#		fi
#	else
	if [ ! -f $1 ]; then
		return 1
	fi

	# Extracting package list from the log file and put it in 
	PACKAGELISTFILE=${1//rsync-/data-}
	cat $1 | awk '$4 ~ />f+++++++++/ && $5 ~ /\.deb$/ {print $5}' &> $PACKAGELISTFILE  | awk 'BEGIN{FS="/"} {print $NF}'
#	cat $1 | awk '$4 ~ />f+++++++++/ && $5 ~ /\.udeb$/ {print $5}' &>> $PACKAGELISTFILE  | awk 'BEGIN{FS="/"} {print $NF}'
	cat $1 | awk '$4 ~ />f+++++++++/ && $5 ~ /\.rpm$/ {print $5}' &>> $PACKAGELISTFILE  | awk 'BEGIN{FS="/"} {print $NF}'

	# Parsing the log file generated by rsync
	if [ ! -f $PACKAGELISTFILE ]; then
		echo "[`date`]: error -parsinglogerror-" >> $DBLOGFILE
		return 1
	fi

	# Verifying if there are packages to process
	total_lines=`wc -l $PACKAGELISTFILE | awk '{print $1}'`
	if [ $total_lines -eq 0 ]; then
		echo "No packages to insert in the DB"
		rm $PACKAGELISTFILE
		rm $1
		return 0
	fi

	if [ $4 = "updates" ] && [ $5 -eq 0 ]; then
		if [ $(expr match $curdist "Fedora") -eq 6 ]; then
			$HTTPSCRIPT -d $2 -l $HTTPLOGFILE -c $CASSANDRAURL -p $6 -q $PACKAGELISTFILE
		elif [ $(expr match $curdist "EPEL") -eq 4 ]; then
			$HTTPSCRIPT -d $2 -l $HTTPLOGFILE -c $CASSANDRAURL -p $6 -q $PACKAGELISTFILE
		elif [ $(expr match $curdist "RHEL") -eq 4 ]; then
			$RHELSCRIPT -d $6 -l $RHEL6LOGFILE -o $1 $IGNOREOPT $DOWNLOADALLOPT $ADVISORYOPT
		elif [ $(expr match $curdist "CentOS") -eq 6 ]; then
			$CENTOSSCRIPT -d $2 -l $CENTOSLOGFILE -c $CASSANDRAURL -K 'PackagesDB' -b $RABASEDIR -f $PACKAGELISTFILE -p $6
		fi
	fi

	INSERTRESULT=$?
	if [ $INSERTRESULT -ne 0 ]; then
		rm $PACKAGELISTFILE
		return $INSERTRESULT
	fi

	# Executing package insert script
	$INSERTSCRIPT -p $PACKAGELISTFILE -d $6 -l $DBLOGFILE -z $curdist -I $4 -c $CASSANDRAURL -m $5

	# Adding the log file name to a list of successful transactions if the insert script has been executed correctly 
	INSERTRESULT=$?
	if [ $INSERTRESULT -eq 0 ]; then
		echo $RSYNCLOGFILE >> $TRANSACTIONLOGFILE
		if [[ ! -z "$7" ]]; then
			cat $PACKAGELISTFILE >> $7
		fi
	fi
	rm $PACKAGELISTFILE

	return $INSERTRESULT
}


IGNOREOPT=""
DOWNLOADALLOPT=""
TARGETDIROPT=""
RECURSIVEMODE=""
RESUMEITEM=0
KEEPDOWNLOADEDFILES=0

while getopts "hifa:r:d:et:m:n:c:oq:s:kl:" opt; do
	case $opt in
	h)
		echo -e "Usage: ./update_pkgs.sh [ options ] \
		\n\nOptions: \
		\n\t -i \t\t\t ignore existent pkgs [RHEL6] \
		\n\t -f \t\t\t fetch all pkgs from RedHat [RHEL6] \
		\n\t -a <advisory> \t\t fetch all pkgs related to the specified advisory [RHEL6] \
		\n\t -r <rsynclogfile> \t replay the transation detailed in rsynclogfile; \
		\n\t \t\t\t must be specified in conjunction with -d \
		\n \
		\n\t -d <directory> \t specify the directory containing the pkgs to be inserted in the DB \
		\n\t -e \t\t\t process pkgs contained in the current directory and all subdirectories \
		\n\t -t <operationtype>\t specify the type of pkgs to be inserted [releases, updates, testing]; \
		\n \t\t\t\t (mandatory with -d option alone) \
		\n \
		\n\t -m <number> \t\t replay a transation from the src pkgs #number \
		\n\t -n <distname> \t\t specify the distribution name (mandatory with -d option alone) \
		\n\t -q <distver> \t\t specify the distribution version (mandatory with -d option alone) \
		\n\t -s <distsection> \t specify the distribution section (for Ubuntu distrubutions only) \
		\n\t -c <distarch> \t\t specify the distribution architecture (mandatory with -d option alone) \
		\n\t -o \t\t\t display log messages on stdout \
		\n\t -k \t\t\t keep downloaded files"
		exit
		;;
	i)
		IGNOREOPT="-$opt"
		;;
	f)
		DOWNLOADALLOPT="-$opt"
		;;
	a)
		ADVISORYOPT="-$opt=$OPTARG"
		;;
	r)
		RSYNCLOGFILE="$OPTARG"
		;;
	d)
		TARGETDIROPT="$OPTARG"
		if [ ${TARGETDIROPT:${#TARGETDIROPT}-1} != '/' ]; then
			TARGETDIROPT="${TARGETDIROPT}/"
		fi
		;;
	e)
		RECURSIVEMODE="ON"
		;;
	t)
		OPERATIONTYPE="$OPTARG"
		;;
	m)
		RESUMEITEM="$OPTARG"
		;;
	n)
		DISTNAME="$OPTARG"
		;;
	q)
		DISTVER="$OPTARG"
		;;
	s)
		DISTSECTION="$OPTARG"
		;;
	c)
		DISTARCH="$OPTARG"
		;;
	o)
		DBLOGFILE="/dev/stdout"
		;;
	k)
		KEEPDOWNLOADEDFILES=1
		;;
	l)
		LINENUMBER="$OPTARG"
		;;
	esac
done


if [ "$TARGETDIROPT" ]; then
	if [ "$RSYNCLOGFILE" ]; then
		if [ ! -f "$RSYNCLOGFILE" ]; then
			echo "[`date`]: error -logfilenamemissing- $RSYNCLOGFILE" >> $DBLOGFILE
			exit
		fi

		filename=`basename $RSYNCLOGFILE`
		FIELDS=$(echo $filename | awk 'BEGIN{FS="-"} {print NF}')
		if [ "$FIELDS" -ne 7 ]; then
			echo "[`date`]: error -logfilenameparseerror- $RSYNCLOGFILE" >> $DBLOGFILE
			exit
		fi

		# Parsing fields of filename to determine distribution name, arch and the type of the update
		DISTNAME=`echo $filename | cut -d '-' -f 2`
		DISTVER=`echo $filename | cut -d '-' -f 3`
		DISTSECTION=`echo $filename | cut -d '-' -f 4 | sed 's/+/\//g'`
		DISTARCH=`echo $filename | cut -d '-' -f 5`
		OPERATIONTYPE=`echo $filename | cut -d '-' -f 6`

		if [ -z $DISTNAME ] || [ -z $DISTARCH ] || [ -z $OPERATIONTYPE ] || [ -z "$DISTVER" ] || [ -z "$DISTSECTION" ]; then
			echo "[`date`]: error -logfilenameparseerror- $RSYNCLOGFILE" >> $DBLOGFILE
			exit
		fi
		KEY=$(echo "$DISTNAME-$DISTVER-$DISTSECTION-$DISTARCH-$OPERATIONTYPE" | sed 's/\//+/g')
		RSYNCURL=$(echo $RSYNCLOGFILE | awk 'BEGIN{FS="/"} {print $(NF-1)}')
		RSYNCEXCLUDEFILE="$LOGDIR/$RSYNCURL/exclude-$KEY.list"
	else
		if [ -z "$DISTNAME" ] || [ -z "$DISTARCH" ] || [ -z "$OPERATIONTYPE" ] || [ -z "$DISTVER" ]; then
			echo "[`date`]: error -missingvars- DISTNAME, DISTVER, DISTARCH, OPERATIONTYPE" >> $DBLOGFILE
			exit
		fi

		if [ "$DISTNAME" = "Ubuntu" ] && [ -z "$DISTSECTION" ]; then
			echo "[`date`]: error -missingvars- DISTSECTION" >> $DBLOGFILE
			exit
		fi

		RSYNCLOGFILE="$LOGDIR/rsync-$DISTNAME-$DISTVER-$DISTSECTION-$DISTARCH-$OPERATIONTYPE-$DATESUFFIX.log"
		if [ -f "$RSYNCLOGFILE" ]; then
			echo "[`date`]: error -logfileexists- $RSYNCLOGFILE" >> $DBLOGFILE
			exit
		fi

		if [ -z "$RECURSIVEMODE" ]; then
			FINDOPT="-maxdepth 1"
		fi

		echo "# Packages in the directory: $TARGETDIROPT" >> $RSYNCLOGFILE
		for pkg in $(find $TARGETDIROPT $FINDOPT -type f); do
			TARGETDIRSED="$(echo $TARGETDIROPT | sed 's/\//\\\//g')"
			PKGSED="$(echo $pkg | sed 's/'$TARGETDIRSED'//')"
			echo "rsync rsync rsync >f+++++++++ $PKGSED" >> $RSYNCLOGFILE
		done
	fi
	
	DIST=$DISTNAME"-"$DISTVER
	db_insert $RSYNCLOGFILE $DIST $DISTARCH $OPERATIONTYPE $RESUMEITEM $TARGETDIROPT $RSYNCEXCLUDEFILE
else
	CURRENTLINE=0
	while read DISTNAME DISTVER DISTSECTION DISTARCH DOWNLOADMETHOD RSYNCUSER RSYNCURL RSYNCDIR TARGETDIR OPERATIONTYPE; do
		(( CURRENTLINE++ ))

		if [[ $DISTNAME == \#* ]]; then
			continue
		fi

		if [ ! -z "$LINENUMBER" ] && [ "$CURRENTLINE" -ne "$LINENUMBER" ]; then
			continue
		fi

		KEY=$(echo "$DISTNAME-$DISTVER-$DISTSECTION-$DISTARCH-$OPERATIONTYPE" | sed 's/\//+/g')
		RSYNCLOGFILE="$LOGDIR/$RSYNCURL/rsync-$KEY-$DATESUFFIX.log"
		RSYNCEXCLUDEFILE="$LOGDIR/$RSYNCURL/exclude-$KEY.list"

		if [ ! -e "$LOGDIR/$RSYNCURL" ]; then
			mkdir -p $LOGDIR/$RSYNCURL
		fi

		if [ ! -f "$RSYNCLOGFILE" ]; then
			touch $RSYNCLOGFILE
		fi
		INCLUDE_OPT="$(echo $DISTSECTION | awk 'BEGIN{FS="/"} {printf("--include ./ "); for (i=1; i<=NF;i++) {printf("--include "); for (j=1;j<=i;j++) {printf("%s/", $j)} printf(" ")}}')"
		if [[ -f $RSYNCEXCLUDEFILE ]]; then
			EXCLUDE_OPT="--exclude-from $RSYNCEXCLUDEFILE"
		else
			EXCLUDE_OPT=""
		fi

		case "$DISTNAME" in
			Fedora|CentOS|EPEL)
			# Synchronizing the update directory
			if [ "$RSYNCURL" != "NORSYNC" ]; then
				rsync -vaHz --numeric-ids --delay-updates --no-motd --log-file=$RSYNCLOGFILE \
					$EXCLUDE_OPT $INCLUDE_OPT --include "$DISTSECTION/*.rpm" --include "$DISTSECTION/[0-9,a-z]/" --include "$DISTSECTION/[0-9,a-z]/*.rpm" \
					--exclude "*" $DOWNLOADMETHOD://$RSYNCURL/$RSYNCDIR $TARGETBASEDIR/$TARGETDIR

				# Testing the exit status of rsync
				if [ $? -ne 0 ]; then
					echo "[`date`]: error -rsyncerror- $RSYNCURL" >> $DBLOGFILE
					exit
				fi
			fi
			;;
			Ubuntu)
			DISTEXTRAPATHINDEX=$(expr index $DISTVER "\+")
			DISTEXTRAPATH=""
			if [ "$DISTEXTRAPATHINDEX" -ne 0 ]; then
				DISTEXTRAPATH=${DISTVER:$DISTEXTRAPATHINDEX}
				DISTVER=${DISTVER:0:$[$DISTEXTRAPATHINDEX-1]}
			fi

			if [ "$OPERATIONTYPE" != "newpackage" ] && [ "$OPERATIONTYPE" != "testing" ]; then	
				DISTPARAM=""$DISTVER"-"$OPERATIONTYPE
			else
				DISTPARAM=""$DISTVER
			fi

			if [ ! -z "$DISTEXTRAPATH" ]; then
				DISTPARAM=$DISTPARAM/$DISTEXTRAPATH
			fi

			if [ "$DOWNLOADMETHOD" = "http" ]; then
				debmirror --debug --rsync-extra=none --host=$RSYNCURL --root=$RSYNCDIR --method=$DOWNLOADMETHOD --dist=$DISTPARAM \
					  --section=$DISTSECTION --arch=$DISTARCH --user=$RSYNCUSER --nosource --no-check-gpg $TARGETBASEDIR/$TARGETDIR | \
					  awk '$1 ~ /^http/ {pos=match($1, /pool/); if (pos > 0) {pool_path=substr($1, pos);
					       printf("rsync rsync rsync >f+++++++++ %s\n", pool_path)}}' > $RSYNCLOGFILE
			else
				debmirror --section=$DISTSECTION --dist=$DISTPARAM --arch=$DISTARCH \
					  --rsync-option="--log-file=$RSYNCLOGFILE --partial -aL -r -v $EXCLUDE_OPT" \
					  --host=$RSYNCURL --root=$RSYNCDIR $RSYNCUSEROPT --user=$RSYNCUSER --nosource --nocleanup --progress \
					  --ignore-small-errors --ignore-release-gpg --method=$DOWNLOADMETHOD $TARGETBASEDIR/$TARGETDIR
			fi
			;;
		esac

		DIST=$DISTNAME"-"$DISTVER
		db_insert $RSYNCLOGFILE $DIST $DISTARCH $OPERATIONTYPE $RESUMEITEM $TARGETBASEDIR/$TARGETDIR $RSYNCEXCLUDEFILE
		if [[ $? -eq 0 ]] && [[ $KEEPDOWNLOADEDFILES -eq 0 ]]; then
			rm -Rf $TARGETBASEDIR/$TARGETDIR/$DISTSECTION
		fi
	done < $FILELIST
fi
